#---------BINARY SEARCH--------------#
pos = -1
lst = [11,13,14,16,17,19,21,41,51,61,71,81]
lst.sort()
print(lst2)
val = 0

def search(val,lst):
    head = 0
    tail = len(lst)-1
    mid = 0

    for i in range(len(lst)):
        if head>=tail:
            return "Not found!"
        elif lst[tail]==val:
            return "Element found at position:{}".format(tail+1)
        elif lst[head]==val:
            return "Element found at position:{}".format(head+1)
        
        mid = (head+tail)//2
        if lst[mid]==val:
            return "Element found at position:{}".format(mid+1)
        elif lst[mid]<val:
            head = mid+1
        elif lst[mid]>val:
            tail = mid+1 
        i+=1        
    return "Not found!"

print(search(val,lst))        

#-----------------------------------------------------------------------------------#

                                    #Mean,Median, Mode:
                                    ------------------
import functools as ft
import math as m

n = int(input("Enter value: "))
lst = list(map(lambda i : int(i),input("Data: ").split(" ")))

mean = ft.reduce(lambda x,y:x+y, lst)/n
print("{:.2f}".format(mean)) 

lst.sort()

#----------------------------------------------------------------
median = 0
if(n%2==0):
    median = (lst[int(n/2)-1] + lst[int(n/2)])/2
else:
    median = lst[m.ceil(n/2)]

print ("{:.2f}".format(median))

#-----------------------------------------------------------------
freq = []

def freqCount(lst):
    for i in lst:
        freq.append(lst.count(i))



freqCount(lst)
mode = min(lst) if max(freq)==1 else lst[freq.index(max(freq))]
print(mode)

#----------------------------------------------------------------------#

                                    #WeightedMean
                                    --------------

import functools as ft

n = int(input())
ele = list(map(lambda i:int(i),input().split(" ")))
wts =  list(map(lambda i:int(i),input().split(" "))) 


def wtdSum(ele,wts,n):
    for i in range(n):
        yield ele[i]*wts[i]                 #multiplying elements of both list at conseqtive positions

wtd_sum = ft.reduce(lambda a,b:a+b,(wtdSum(ele,wts,n)))     #using reduce to find sum of elements
wt_sum = ft.reduce(lambda a,b:a+b,wts)
wtd_mean = wtd_sum/wt_sum
print('{:.1f}'.format(wtd_mean))

#-------------------------------------------------------------------------------#
                                   
                                    Standard Deviation cal
                                    -----------------------
import functools as ft

n = int(input())
ele = list(map(lambda i:int(i),input().split(" ")))
wts =  list(map(lambda i:int(i),input().split(" "))) 


def wtdSum(ele,wts,n):
    for i in range(n):
        yield ele[i]*wts[i]

wtd_sum = ft.reduce(lambda a,b:a+b,(wtdSum(ele,wts,n)))
wt_sum = ft.reduce(lambda a,b:a+b,wts)
wtd_mean = wtd_sum/wt_sum
print('{:.1f}'.format(wtd_mean))

#-----------------------------------------------------------------------------------#
                                
                                Selection sort
                                --------------

class EssToolkit:
    def __init__(self):
        pass

    def sortIt(self,lst):

        for i in range(len(lst)-1):
            min_pos = i
            for j in range(i,len(lst)):
                if(lst[i]>lst[j]):
                    min_pos=j
                    
            temp = lst[i]
            lst[i]=lst[min_pos]
            lst[min_pos]=temp
        
        return(lst)

 
if __name__ == "__main__":

    lst = [2,1,3,8,5,3,7,4]
    obj1 = EssToolkit()
    print(obj1.sortIt(lst))
    
#----------------------------------------------------------------------------------------------------------------------------#

                            #Sudoku solving backtracking algorithm
                            ---------------------------------------

import numpy as np
sudoku_grid = [[5,3,0,0,7,0,0,0,0],
        [6,0,0,1,9,5,0,0,0],
        [0,9,8,0,0,0,0,6,0],
        [8,0,0,0,6,0,0,0,3],
        [4,0,0,8,0,3,0,0,1],
        [7,0,0,0,2,0,0,0,6],
        [0,6,0,0,0,0,2,8,0],
        [0,0,0,4,1,9,0,0,5],
        [0,0,0,0,8,0,0,7,9]]


print(np.matrix(sudoku_grid))

#helper_function - determines if we can put the value in that place or not 
def possible(y,x,n):
    global sudoku_grid
    for i in range(0,9):
        if sudoku_grid[y][i]==n:
            return False
    for i in range(0,9):
        if sudoku_grid[i][x] == n:
            return False
    
    x0 = (x//3)*3
    y0 = (y//3)*3

    for i in range(0,3):
        for j in range(0,3):
            if sudoku_grid[y0+i][x0+j]==n:
                return False
    return True




#Solver function
def solve():
    global sudoku_grid
    for y in range(9):
        for x in range(9):
            if sudoku_grid[y][x] == 0:
                for n in range(1,10):
                    if possible(y,x,n):
                        sudoku_grid[y][x]=n
                        solve()
                        sudoku_grid[y][x]=0
                return    

    print()
    print(np.matrix(sudoku_grid))


solve()
print(np.matrix(sudoku_grid))

#------------------------------------------------------------------------------#

                                    #Recursion
                                    ----------

def factorial(n):
    if n>1 :
       return n*factorial(n-1)
    print(n) 
    return n    

print(factorial(5))
